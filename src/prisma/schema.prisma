// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model SiteSetting {
  id              Int         @id @default(autoincrement())
  name            String
  owner           String
  directorName    String
  directorPostion String
  directorMessage String
  createdDate     DateTime    @default(now())
  licenseStatus   String
  hero            Hero        @relation(fields: [heroId], references: [id])
  homeSettings    HomeService @relation(fields: [homeServiceId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  heroId          Int
  homeServiceId   String
}

model Hero {
  id          Int           @id @default(autoincrement())
  header      String
  content     String
  link        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SiteSetting SiteSetting[]
}

model Faq {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  faqQuestions FaqQuestion[]

  @@map(name: "faq_questions")
}

model HomeService {
  id          String        @id @default(cuid())
  name        String
  title       String
  description String
  services    Service[]
  SiteSetting SiteSetting[]

  // Add the opposite relation field in the HomeService model
  @@map(name: "home_service_services")
}

model Service {
  id        String @id @default(cuid())
  imageLink String
  title     String
  content   String

  // Add the opposite relation field in the Service model
  homeServices HomeService[]

  @@map(name: "service_home_services")
}

model FaqQuestion {
  id     String @id @default(cuid())
  title  String
  Answer String
  Faq    Faq?   @relation(fields: [faqId], references: [id])
  faqId  Int?
}

model Post {
  id         String     @id @default(cuid())
  title      String
  content    String?
  createAt   DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  published  Boolean    @default(false)
  slug       String     @unique
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
  imageUrl   String     @default("https://images.unsplash.com/photo-1577896850715-ed0b7e3ece57?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1174&q=80")
  categories Category[]
  tags       Tag[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  name          String
  password      String?
  phone         String    @unique
  profession    String?
  professional_pin      String?
  balance       Float     @default(0)
  email         String?     
  createdAt     DateTime   @default(now()) @map(name: "created_at")
  updatedAt     DateTime   @updatedAt @map(name: "updated_at")
  image         String?
  posts         Post[]
  emailVerified DateTime?
  role          UserRole   @default(SUBSCRIBER)
  sessions      Session[]
  events        Event[]    @relation("author")
  attendees     Attendee[] @relation("registrant")
  accounts      Account[]
  payments      Payment[]
}

model Payment {
  id        String   @id @default(cuid())
  receipt   String?
  amount    Float
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Event {
  id         String     @id @default(cuid())
  title      String
  details    String
  location   String
  paymentLink String?
  organizers String?
  eventDate  DateTime   @default(now()) 
  price      Float      @default(0)
  createdAt  DateTime   @default(now()) @map(name: "created_at")
  updatedAt  DateTime   @updatedAt @map(name: "updated_at")
  image      String?
  user       User       @relation("author", fields: [userId], references: [id])
  userId     String
  eventtags  EventTag[]  @relation("EventToTag") 
  tagIds     String[]
  attendees  Attendee[]
}

model EventTag {
  id      String @id @default(cuid())
  name    String
  eventId String
  event   Event      @relation("EventToTag", fields: [eventId], references: [id])
}

model Attendee {
  id           String   @id @default(cuid())
  paid         Boolean  @default(false)
  amount_paid  Float?
  amount_due   Float?
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @updatedAt @map(name: "updated_at")
  event        Event    @relation(fields: [eventId], references: [id])
  eventId      String
  user         User     @relation("registrant", fields: [registrantId], references: [id])
  registrantId String   @default(cuid())
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPER_ADMIN
  ADMINISTRATOR
  EDITOR
  AUTHOR
  CONTRIBUTOR
  SUBSCRIBER
}

model Category {
  id          String  @id @default(cuid())
  name        String
  slug        String?
  description String?
  posts       Post[]
}

model Tag {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  posts       Post[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
